@model QuizViewModel
@{
    ViewData["Title"] = "Create Quiz";
}

<h2>Create Quiz</h2>
<style>
    body {
        margin: 0;
        padding: 0;
        height: 100vh;
        display: flex;
        background: linear-gradient(120deg, rgba(255, 255, 255, 0.7) 70%, #dcdcdc 70%), url('/Photos/tło.jpg');
        background-repeat: no-repeat;
        background-size: cover;
    }

    .text-container {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px; /* Dodaj wewnętrzny odstęp do text-container */
        text-align: center;
        opacity: 0.9; /* opcjonalne: można dostosować przeźroczystość do tła */
    }

    .text-content {
        color: #333; /* Kolor tekstu dostosowany do tła szarych budynków */
        text-shadow: 2px 2px 5px white; /* Dodaj cień do tekstu */
    }

    .form-group {
        margin-bottom: 20px; /* Dodaj odstęp między pytaniem a przyciskiem */
    }

    .form-buttons {
        display: flex;
        gap: 10px; /* Dodaj odstęp między przyciskami */
    }
</style>

<form asp-action="Create">
    <div class="form-group">
        <label asp-for="Title" class="control-label"></label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <input type="hidden" id="kursId" name="kursId" value="@Model.KursId" />
   @*  <input asp-for="KursId" class="form-control" readonly /> *@
   
    <div class="form-group">
        <label for="numberOfQuestions">Number of Questions</label>
        <input type="number" id="numberOfQuestions" class="form-control" value="1" min="1" />
    </div>

    <div class="form-buttons">
        <button type="button" id="generateQuestionsBtn" class="btn btn-secondary">Generate Questions</button>
        <button type="submit" class="btn btn-success">Create Quiz</button>
    </div>

    <div id="questionContainer">
        <!-- Questions will be dynamically added here -->
    </div>


</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            $("#generateQuestionsBtn").click(function () {
                const numberOfQuestions = $("#numberOfQuestions").val();
                $("#questionContainer").empty(); // Clear previous questions
                for (let i = 0; i < numberOfQuestions; i++) {
                    addQuestion(i);
                }
            });

            function addQuestion(questionIndex) {
                let questionHtml = `
                            <div class="form-group">
                                <label>Question ${questionIndex + 1}</label>
                                <input type="text" name="Questions[${questionIndex}].Text" class="form-control" />
                                ${generateAnswersHtml(questionIndex)}
                            </div>
                            <hr />`;

                $("#questionContainer").append(questionHtml);
            }

            function generateAnswersHtml(questionIndex) {
                let answersHtml = '';
                for (let i = 0; i < 4; i++) {
                    answersHtml += `
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="Questions[${questionIndex}].Answers[${i}].IsCorrect" value="true" />
                                    <label class="form-check-label">Is Correct Answer ${i + 1}</label>
                                    <input type="text" name="Questions[${questionIndex}].Answers[${i}].Text" class="form-control" placeholder="Answer ${i + 1}" />
                                </div>`;
                }
                return answersHtml;
            }
        });
    </script>
}
